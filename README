# Guia para Montar o Código do `main.cpp`

Este guia foi criado para ajudar os estudantes do curso técnico de Desenvolvimento de Sistemas, na matéria de IoT, a montar o código do arquivo `main.cpp` de forma organizada e intuitiva.

## Passo a Passo

### 1. **Configuração Inicial**
    - **Objetivo**: Configurar o ambiente básico do projeto.
    - **O que fazer**:
      - Inclua as bibliotecas necessárias, como `<WiFi.h>` e `<PubSubClient.h>`.
      - Defina as credenciais da rede Wi-Fi:
         ```cpp
         const char* ssid = "SEU_SSID";
         const char* password = "SUA_SENHA";
         ```

### 2. **Configuração do Cliente MQTT**
    - **Objetivo**: Preparar a comunicação com o broker MQTT.
    - **O que fazer**:
      - Declare o endereço do broker MQTT e a porta:
         ```cpp
         const char* mqtt_server = "BROKER_MQTT";
         ```
      - Crie objetos para o cliente Wi-Fi e MQTT:
         ```cpp
         WiFiClient espClient;
         PubSubClient client(espClient);
         ```

### 3. **Função de Conexão Wi-Fi**
    - **Objetivo**: Garantir que o dispositivo se conecte à rede Wi-Fi.
    - **O que fazer**:
      - Crie uma função chamada `setup_wifi()`:
         ```cpp
         void setup_wifi() {
              delay(10);
              Serial.println("Conectando ao WiFi...");
              WiFi.begin(ssid, password);
              while (WiFi.status() != WL_CONNECTED) {
                    delay(500);
                    Serial.print(".");
              }
              Serial.println("Conectado!");
         }
         ```

### 4. **Função de Callback MQTT**
    - **Objetivo**: Processar mensagens recebidas do broker MQTT.
    - **O que fazer**:
      - Crie uma função `callback()` para lidar com mensagens:
         ```cpp
         void callback(char* topic, byte* payload, unsigned int length) {
              Serial.print("Mensagem recebida em: ");
              Serial.println(topic);
              // Processar payload
         }
         ```

### 5. **Função de Reconexão MQTT**
    - **Objetivo**: Reconectar ao broker MQTT caso a conexão seja perdida.
    - **O que fazer**:
      - Crie uma função `reconnect()`:
         ```cpp
         void reconnect() {
              while (!client.connected()) {
                    Serial.print("Tentando conectar ao MQTT...");
                    if (client.connect("ESP32Client")) {
                         Serial.println("Conectado!");
                         client.subscribe("topico/teste");
                    } else {
                         Serial.print("Falha, rc=");
                         Serial.print(client.state());
                         delay(5000);
                    }
              }
         }
         ```

### 6. **Função `setup()`**
    - **Objetivo**: Inicializar o dispositivo.
    - **O que fazer**:
      - Configure a comunicação serial e chame as funções de inicialização:
         ```cpp
         void setup() {
              Serial.begin(115200);
              setup_wifi();
              client.setServer(mqtt_server, 1883);
              client.setCallback(callback);
         }
         ```

### 7. **Função `loop()`**
    - **Objetivo**: Manter o dispositivo em funcionamento contínuo.
    - **O que fazer**:
      - Verifique a conexão MQTT e processe mensagens:
         ```cpp
         void loop() {
              if (!client.connected()) {
                    reconnect();
              }
              client.loop();
         }
         ```

### 8. **Testes**
    - **Objetivo**: Garantir que o código funcione corretamente.
    - **O que fazer**:
      - Compile e envie o código para o ESP32.
      - Verifique a saída no monitor serial para confirmar a conexão Wi-Fi e MQTT.

Com este guia, você terá um código funcional e bem estruturado para o seu projeto IoT. Boa sorte!